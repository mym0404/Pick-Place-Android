apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

androidExtensions {
    experimental = true
}
android {

    /**
     * Project 레벨의 build.gradle 에 여러 상수를 정의해놓고 사용합니다.
     */
    def constants = rootProject.ext

    compileSdkVersion constants.targetSdkVersion

    defaultConfig {
        applicationId constants.packageName
        minSdkVersion constants.minSdkVersion
        targetSdkVersion constants.targetSdkVersion
        versionCode constants.versionCode
        versionName constants.versionName
        testInstrumentationRunner constants.testInstrumentationRunner

        /**
         * MultiDex를 명시적으로 사용해줍니다. (API > 21 부턴 필요 X)
         */
        multiDexEnabled true

        /**
         * 데이터 바인딩 사용합니다.
         */
        dataBinding.enabled = true

        /**
         * VectorDrawable이 낮은 SDK에서 충돌이 일어나지 않게 해줍니다.
         */
        vectorDrawables.useSupportLibrary = true

        resValue "string", "google_maps_key", (project.findProperty("GOOGLE_MAPS_API_KEY") ?: "")
    }
    buildTypes {
        release {
            /**
             * Release 빌드에서 코드의 shrink를 허용합니다.
             * 3.4부터 R8이 Proguard 대신 default로 사용되고 Proguard는 쓰이지 않습니다.
             */
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    /**
     * 기존 src/main/java 폴더에 있는 소스 코드들을 src/main/kotlin 에서 사용할 수 있게 해줍니다.
     * 좌측 Project 탭에서 Android 로 설정하면 그래도 java라고 표시되는 Android Studio의 오류가 있습니다.
     * 실제 경로는 src/main/kotlin 입니다.
     */
    sourceSets {
        main.java.srcDirs = ['src/main/kotlin']
        test.java.srcDirs = ['src/test/kotlin']
        androidTest.java.srcDirs = ['src/androidTest/kotlin']
    }
    /**
     * 자바 1.8과 호환이 가능하도록 설정해줍니다.
     */
    compileOptions {
        sourceCompatibility = constants.sourceCompatibility
        targetCompatibility = constants.targetCompatibility
    }
    /**
     * 테스트 코드에서 Integration 테스트를 위해 허용해줍니다.
     */
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

}

/**
 * App에서 사용할 라이브러리들
 * buildSrcVersions 이라는 Gradle 플러그인을 사용했으며, 터미널에 ./gradlew buildSrcVersions 이라는 명령어를 이용해 실행 가능합니다.
 * 실행 시에 자동으로 import 되어있는 의존성(Sync 안해도 이 파일에 입력만 되있으면)들을 Libs 전역 객체에 설정해주어서 우리는 마치 변수처럼 사용이 가능합니다.
 * 그리고 Versions.kt에 최신 버전을 자동으로 찾아서 주석으로 달아주기 때문에 모든 라이브러리 페이지에 들어가서 최신 버전을 체크할 필요가 없습니다.
 *
 * 이는 안드로이드 스튜디오 Gradle 3.5부터 지원된 플러그인입니다.
 * 프로젝트 구조에서 buildSrc 라고 생성된 모듈에 Libs와 Versions.kt 파일을 자동으로 만들어서 이 파일에서 참조해서 의존성을 추가할 수 있도록 돕습니다.
 * 자세한 사용법은 다음과 같은 사이트를 참조하세요.
 * [https://github.com/jmfayard/buildSrcVersions]
 */
dependencies {
    //Room
    implementation Libs.room_runtime
    kapt Libs.room_compiler
    implementation Libs.room_ktx

    //Retrofit
    implementation Libs.retrofit
    implementation Libs.retrofit_mock
    implementation Libs.converter_gson
    implementation Libs.converter_scalars

    //Glide
    implementation Libs.glide
    kapt Libs.com_github_bumptech_glide_compiler

    //UI
    implementation Libs.constraintlayout
    implementation Libs.material
    implementation Libs.autofittextview
    implementation Libs.viewpager2
    implementation Libs.pageindicatorview
    implementation Libs.numbermarbleview

    //Firebase & Google
    implementation Libs.places
    implementation Libs.firebase_analytics
    implementation Libs.play_services_maps
    implementation Libs.android_maps_utils
    implementation Libs.firebase_dynamic_links

    //AAC
    implementation Libs.lifecycle_viewmodel_ktx
    implementation Libs.lifecycle_livedata
    kapt Libs.lifecycle_compiler

    //KOIN
    implementation Libs.koin_androidx_ext
    implementation Libs.koin_androidx_viewmodel
    implementation Libs.koin_androidx_scope

    //ETC
    implementation Libs.kotlin_stdlib
    implementation Libs.appcompat
    implementation Libs.dexter
    implementation Libs.multidex
    implementation Libs.kotlin_reflect // 수민 추가

    implementation Libs.circle_image_view
}
/**
 * Local Unit Test에서 사용할 라이브러리들
 */
dependencies {
    testImplementation Libs.androidx_test_core
    testImplementation Libs.junit_junit
    testImplementation Libs.androidx_test_runner
    testImplementation Libs.androidx_test_rules
    testImplementation Libs.androidx_test_ext_junit
    testImplementation Libs.androidx_test_ext_truth
    testImplementation Libs.com_google_truth_truth
    testImplementation Libs.espresso_core
    testImplementation Libs.espresso_contrib
    testImplementation Libs.robolectric
}

/**
 * Instrumentation Test에서 사용할 라이브러리들
 */
dependencies {
    androidTestImplementation Libs.androidx_test_core
    androidTestImplementation Libs.androidx_test_runner
    androidTestImplementation Libs.espresso_core
    androidTestImplementation Libs.espresso_contrib
    androidTestImplementation Libs.androidx_test_rules
    androidTestImplementation Libs.androidx_test_ext_junit
    androidTestImplementation Libs.androidx_test_ext_truth
    androidTestImplementation Libs.com_google_truth_truth
}

apply plugin: 'com.google.gms.google-services'

dependencies {
    implementation 'androidx.appcompat:appcompat:+'
    implementation 'androidx.constraintlayout:constraintlayout:+'
}

dependencies {
    implementation 'androidx.appcompat:appcompat:+'
    implementation 'androidx.constraintlayout:constraintlayout:+'
}

dependencies {
    implementation 'androidx.appcompat:appcompat:+'
    implementation 'androidx.constraintlayout:constraintlayout:+'
}

dependencies {
    implementation 'androidx.appcompat:appcompat:+'
    implementation 'androidx.constraintlayout:constraintlayout:+'
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:+'
}

dependencies {
    implementation 'androidx.appcompat:appcompat:+'
    implementation 'androidx.constraintlayout:constraintlayout:+'
}
